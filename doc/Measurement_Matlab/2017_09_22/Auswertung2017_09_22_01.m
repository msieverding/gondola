%% Import data from spreadsheet
% Script for importing data from the following spreadsheet:
%
%    Workbook: C:\Users\Marvin\Dropbox\01 Studium\III WiSe 17 18\01 Projektarbeit\Messungen\2017_09_22\2017_09_22.xls
%    Worksheet: 01
%
% To extend the code for use with different selected data or a different
% spreadsheet, generate a function instead of a script.

% Auto-generated by MATLAB on 2017/09/22 11:24:51

clearvars;
%% Import the data
[~, ~, raw] = xlsread('C:\Users\Marvin\Desktop\Projektarbeit\gondola\doc\Measurement_Matlab\2017_09_22\2017_09_22.xls','01');
raw = raw(4:end,1:2);

%% Create output variable
data = reshape([raw{:}],size(raw));

%% Allocate imported array to column variable names
Length = data(:,1);
Meas = data(:,2);
Err = Meas - Length;
RopeTotalLength = 10000;
RopeOnSpool = RopeTotalLength - Meas;

%% Clear temporary variables
clearvars data raw;
close all;

%% Plot Error against length
f = figure;
ylim([-100 350]);
set(f, 'Units', 'normalized', 'Position', [0.2, 0.2, 0.3, 0.4]); 
hold on;
h = plot(Length, Err, 'rx');
set(h, 'linewidth', 1.5);
title("Error against input length");
xlabel("Input length [mm]");
ylabel("Error [mm]");
legend("Error", 'Location' ,'best');

%% Linear Regression of Error dependent on spooled length
% Lineare regression des fehlers auf Basis der abgespulten länge.
% Gemessen wurde immer bis zum weißen Kunststoff beim Motor um über alle
% Längen eine Aussage zu haben. Vorher wurde bis zum Haken mit Offset von
% etwa 1,3 Meter gemessen. Das führt natürlich zu Verfälschungen.
f = figure;
ylim([-100 350]);
set(f, 'Units', 'normalized', 'Position', [0.2, 0.2, 0.3, 0.4]); 
hold on;
x = Length./10;    % calc in cm
y = Err./10;      % calc in cm
%X = [ones(length(x), 1) x];
m = x\y; % least squares regression % attention: these are mm not cm!
ErrRegression = x * m;              % estimated error 
h = plot(x.*10, y.*10, 'rx');
set(h, 'linewidth', 1.5);
h = plot(x.*10, ErrRegression.*10, 'g-');
set(h, 'linewidth', 1.5);
title("Linear regression of error");
xlabel("Input length [mm]");
ylabel("Error [mm]");
legend("Error", "Linear error estimation", 'Location' ,'best');
% Ergebnis: Eine gerade erzeugt in gewissen bereichen (unten und oben) doch
% einen recht großen Fehler. Dadruch, dass dich das Seil zu einem Berg
% aufwickelt nimmt die Fehleränderungen mit weiterem spulen ab.
% Nächster Ansatz: quadratisch
%% Quadratic regression of Error dependend on spooled length
% -> used for next experiment
format long;
f = figure;
ylim([-100 350]);
set(f, 'Units', 'normalized', 'Position', [0.2, 0.2, 0.3, 0.4]); 
hold on;
x = Length ./ 10; %calc in cm
y = Err ./ 10;    %calc in cm
p = polyfit(x,y,2)
x_cont = 0:1:max(x);
ErrRegression = polyval(p,x_cont);
h = plot(x.*10, y.*10, 'rx');
set(h, 'linewidth', 1.5);
h = plot(x_cont.*10, ErrRegression.*10, 'g-');
set(h, 'linewidth', 1.5);
title("Quadratic polynomal fit of error with spooled rope");
xlabel("Input length [mm]");
ylabel("Error [mm]");
legend("Error", "Quadratic polynomial estimation of error", 'Location' ,'best');
% Näherung sieht sehr gut aus. Lediglich landet 0 nicht bei 0. Der Fehler
% ist aber recht klein. Man könnten von 0 is 1 Meter den Fehler noch Linear
% genauer regressieren, wenn man in dem Bereich arbeiten möchte.
% Eine andere Alternative wäre zwei lineare Gleichungen zu nehmen und
% irgendwo in der Mitte sinnvoll zu trennen. Das werde ich aber erstmal
% nicht ausprobieren.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Plot Error against rope on spool
figure;
hold on;
plot(RopeOnSpool, Err, 'rx');
title("Error against rope on spool");
xlabel("Rope on spool [mm]");
ylabel("Error [mm]");
legend("Error without correction", 'Location' ,'best');

%% Quadratic regression of Error dependend on rope on spool
% Hier versuche ich den Fehler über das Restseil auf der Rolle zu
% berechnen. Wäre brauchbar, wenn man die Gesamtänge des Seils ändert und
% keine neuen Versuche machen möchte.
%-> Not used! See next section
format long;
figure;
hold on;
x = RopeOnSpool./10; %calc in cm
y = Err./10;    %calc in cm
p = polyfit(x,y,2)
x_cont = 0:1:max(x);
ErrRegression = polyval(p,x_cont);
plot(x.*10, y.*10, 'rx');
plot(x_cont.*10, ErrRegression.*10, 'g-');
title("Quadratic polynomal fit of error with rope on spool");
xlabel("Rope on spool [mm]");
ylabel("Error [mm]");
legend("error", "estimation of error", 'Location' ,'best');
% Funktioniert tendenziell wenn man eine Versuchsreihe hat.
% Nächster Versuch behandelt die umsetzbarkeit.

%% Quadratic regression of Error dependend on rope on spool for the first half of measurements
% Aussage des folgenden Graphen: Wenn man die gesamtlänge erhöt ist das
% Modell nicht mehr brauchbar.
% Modelliert wurde mit den Messungen der ersten hälfte der Versuche. Dann
% wird der geschätze Fehler verglichen mit dem wirklichen Fehler. Man
% sieht, dass das sehr weit auseinander geht und somit das Modell nicht
% erweiterbar ist um ein längeres Seil
figure;
hold on;
x = RopeOnSpool(1:length(RopeOnSpool)/2) ./ 10; %calc in cm
y = Err(1:length(Err)/2) ./ 10;    %calc in cm
x_2 = RopeOnSpool ./ 10;
y_2 = Err ./ 10;
p = polyfit(x,y,2)
x_cont = 0:1:max(x);
ErrRegression = polyval(p,x_cont);
plot(x_2.*10 , y_2.*10, 'rx');
plot(x.*10, y.*10, 'ro');
plot(x_cont.*10, ErrRegression.*10, 'g-');
title("Quadratic polynomal fit of error with rope on spool");
xlabel("Rope on spool [mm]");
ylabel("Error [mm]");
legend("error", "used err measurements", "estimation of error", 'Location' ,'best');




